name: "publish"

on:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
            arch: "arm64"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
            arch: "x64"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "pnpm"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Download models from AWS S3
        run: |
          mkdir -p src-tauri/models
          aws s3 sync s3://rune-models/ src-tauri/models/ --no-progress

      - name: install frontend dependencies
        run: pnpm install

      - name: import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: verify certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: Extract app version
        id: app_version
        run: |
          VERSION=$(grep -m 1 '"version"' src-tauri/tauri.conf.json | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[:space:]')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: build and publish
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__
          releaseName: "Rune App __VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Find build artifact
        id: find_artifact
        run: |
          ARTIFACT_PATH=$(find target/*/release/bundle/dmg -name "*.dmg" -o -name "*.app" | head -n 1)
          echo "ARTIFACT_PATH=$ARTIFACT_PATH" >> $GITHUB_ENV
          echo "Found artifact at $ARTIFACT_PATH"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: rune-app-${{ env.VERSION }}-macos-${{ matrix.arch }}
          path: ${{ env.ARTIFACT_PATH }}
          retention-days: 7

      - name: Upload files to S3
        run: |
          # Create version directory name
          VERSION_DIR="app-v${{ env.VERSION }}"

          # 1. Upload latest.json
          LATEST_JSON=$(find target/*/release -name "latest.json" | head -n 1)
          if [ -n "$LATEST_JSON" ]; then
            echo "Uploading $LATEST_JSON to s3://rune-builds/$VERSION_DIR/latest.json"
            aws s3 cp "$LATEST_JSON" "s3://rune-builds/$VERSION_DIR/latest.json" --no-progress
          fi

          # 2. Upload DMG file
          DMG_FILE=$(find target/*/release/bundle/dmg -name "*.dmg" | head -n 1)
          if [ -n "$DMG_FILE" ]; then
            ARCH_SUFFIX=""
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              ARCH_SUFFIX="aarch64"
            elif [[ "${{ matrix.arch }}" == "x64" ]]; then
              ARCH_SUFFIX="x64"
            fi

            if [ -n "$ARCH_SUFFIX" ]; then
              DMG_BASENAME=$(basename "$DMG_FILE" .dmg)
              DMG_FILENAME="Rune_${{ env.VERSION }}_${ARCH_SUFFIX}.dmg"
              echo "Uploading $DMG_FILE to s3://rune-builds/$VERSION_DIR/$DMG_FILENAME"
              aws s3 cp "$DMG_FILE" "s3://rune-builds/$VERSION_DIR/$DMG_FILENAME" --no-progress
            fi
          fi

          # 3. Upload app.tar.gz and its signature
          TAR_FILE=$(find target/*/release -name "*.app.tar.gz" | head -n 1)
          if [ -n "$TAR_FILE" ]; then
            ARCH_SUFFIX=""
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              ARCH_SUFFIX="aarch64"
            elif [[ "${{ matrix.arch }}" == "x64" ]]; then
              ARCH_SUFFIX="x64"
            fi

            if [ -n "$ARCH_SUFFIX" ]; then
              TAR_FILENAME="Rune_${ARCH_SUFFIX}.app.tar.gz"
              echo "Uploading $TAR_FILE to s3://rune-builds/$VERSION_DIR/$TAR_FILENAME"
              aws s3 cp "$TAR_FILE" "s3://rune-builds/$VERSION_DIR/$TAR_FILENAME" --no-progress

              # Upload the signature file if it exists
              SIG_FILE="${TAR_FILE}.sig"
              if [ -f "$SIG_FILE" ]; then
                SIG_FILENAME="${TAR_FILENAME}.sig"
                echo "Uploading $SIG_FILE to s3://rune-builds/$VERSION_DIR/$SIG_FILENAME"
                aws s3 cp "$SIG_FILE" "s3://rune-builds/$VERSION_DIR/$SIG_FILENAME" --no-progress
              fi
            fi
          fi
